-- Feel free to modify this file to match your development goal.
-- Here we only create 3 tables for demo purpose.

-- Images
CREATE TABLE Images (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    content VARCHAR(255) NOT NULL
);

-- User Guru: Account / Purchases
CREATE TABLE Users (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    balance DECIMAL(12,2) DEFAULT 0 CHECK (balance >= 0)
);

CREATE TABLE Categories (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    label VARCHAR(255) NOT NULL
);

-- Product Guru
CREATE TABLE Products (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id),
    name VARCHAR(255) UNIQUE NOT NULL,
    description VARCHAR(255) NOT NULL,
    imgid INT NOT NULL REFERENCES Images(id)
);

CREATE TABLE Tags (
    pid INT NOT NULL REFERENCES Products(id),
    cid INT NOT NULL REFERENCES Categories(id)
);

-- Carts Guru: Cart / Order
CREATE TABLE Carts (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT UNIQUE REFERENCES Users(id)
);

CREATE TABLE Orders (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id),
    time_created timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    fulfillment_status VARCHAR(20) NOT NULL DEFAULT 'pending',
    time_fulfilled timestamp without time zone
);

-- Seller: Inventory / Order Fulfillment
CREATE TABLE Sellers (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id) UNIQUE
);

CREATE TABLE Inventories (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sid INT NOT NULL REFERENCES Sellers(id),
    pid INT NOT NULL REFERENCES Products(id),
    current_quantity INTEGER DEFAULT 0 CHECK (current_quantity >= 0),
    price DECIMAL(12,2) NOT NULL,
    UNIQUE(sid, pid)
);

CREATE TABLE Inventory_Designs (
    invid INT NOT NULL UNIQUE REFERENCES Inventories(id) ON DELETE CASCADE,
    name VARCHAR(255) UNIQUE NOT NULL,
    description VARCHAR(255) NOT NULL
);

CREATE TABLE Inventory_Images (
    invid INT NOT NULL REFERENCES Inventories(id) ON DELETE CASCADE,
    imgid INT NOT NULL REFERENCES Images(id)
);

CREATE TABLE Order_Products (
    oid INT NOT NULL REFERENCES Orders(id),
    invid INT NOT NULL REFERENCES Inventories(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    fulfillment_status VARCHAR(20) NOT NULL DEFAULT 'pending',
    time_fulfilled timestamp without time zone
);

CREATE TABLE Cart_Products (
    cid INT NOT NULL REFERENCES Carts(id),
    invid INT NOT NULL REFERENCES Inventories(id) ON DELETE CASCADE,
    quantity INTEGER DEFAULT 1 CHECK (quantity >= 1),
    unit_price DECIMAL(12,2) NOT NULL,
    in_cart BOOLEAN DEFAULT TRUE -- if false: save for later
);

-- Social: Feedback / Messaging
CREATE TABLE Reviews ( -- Buyer and certain Inventory (product)
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id),
    invid INT NOT NULL REFERENCES Inventories(id) ON DELETE CASCADE,
    rating INT NOT NULL,
    review VARCHAR(255),
    time_created timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    upvote INTEGER DEFAULT 0
);

CREATE TABLE Feedbacks ( -- Buyer and Seller
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id),
    sid INT NOT NULL REFERENCES Sellers(id),
    rating INT NOT NULL,
    review VARCHAR(255),
    time_created timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    upvote INTEGER DEFAULT 0
);

CREATE TABLE Review_Images (
    rid INT NOT NULL REFERENCES Reviews(id) ON DELETE CASCADE,
    imgid INT NOT NULL REFERENCES Images(id)
);

CREATE TABLE Feedback_Images (
    fid INT NOT NULL REFERENCES Feedbacks(id) ON DELETE CASCADE,
    imgid INT NOT NULL REFERENCES Images(id)
);

CREATE TABLE ReviewUpvotes (
    review_id INT,
    user_id INT,
    UNIQUE(review_id, user_id),
    FOREIGN KEY (review_id) REFERENCES Reviews(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);

CREATE TABLE FeedbackUpvotes (
    feedback_id INT,
    user_id INT,
    UNIQUE(feedback_id, user_id),
    FOREIGN KEY (feedback_id) REFERENCES Feedbacks(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES Users(id)
);


-- NOT USED


